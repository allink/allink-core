# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2017-06-21 09:32
from __future__ import unicode_literals

import allink_core.core.models.fields
import allink_core.core_apps.allink_button_link.model_fields
import cms.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import djangocms_attributes_field.fields
import filer.fields.file


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('filer', '0007_auto_20161016_1055'),
        ('cms', '0016_auto_20160608_1535'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllinkButtonLinkContainerPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='allink_button_link_allinkbuttonlinkcontainerplugin', serialize=False, to='cms.CMSPlugin')),
                ('alignment_horizontal_desktop', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], help_text='This option overrides the projects default alignment for desktop. (Usually "left")', max_length=50, null=True, verbose_name='Alignment horizontal desktop')),
                ('alignment_horizontal_mobile', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], help_text='This option overrides the projects default alignment for mobile. (Usually "left")', max_length=50, null=True, verbose_name='Alignment horizontal mobile')),
                ('project_css_classes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50, null=True), blank=True, null=True, size=None)),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin',),
        ),
        migrations.CreateModel(
            name='AllinkButtonLinkPlugin',
            fields=[
                ('link_object_id', models.IntegerField(help_text='To which object directs the url.', null=True)),
                ('link_model', models.CharField(help_text='Dotted Path to referenced Model', max_length=300, null=True)),
                ('link_url_name', models.CharField(help_text='Name of the App-URL to use.', max_length=64, null=True)),
                ('link_url_kwargs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50, null=True), blank=True, help_text='Keyword arguments used to reverse url.', null=True, size=None)),
                ('link_url', models.URLField(blank=True, default='', help_text='Provide a valid URL to an external website.', verbose_name='External link')),
                ('link_mailto', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email address')),
                ('link_phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='Phone')),
                ('link_anchor', models.CharField(blank=True, help_text='Appends the value only after the internal or external link.Do <em>not</em> include a preceding "#" symbol.', max_length=255, verbose_name='Anchor')),
                ('link_target', models.IntegerField(blank=True, choices=[(1, 'New window'), (2, 'Softpage large'), (3, 'Softpage small'), (4, 'Lightbox (Forms)'), (5, 'Lightbox (Image)')], null=True, verbose_name='Link Target')),
                ('link_special', models.CharField(blank=True, choices=[('account_login', 'Member Login'), ('account_logout', 'Member Logout'), ('account_change_password', 'Member Change Passwort'), ('account_reset_password', 'Member Reset Passwort'), ('members:profile_edit', 'Member Edit Profile'), ('contact:request', 'Contact Form')], max_length=255, null=True, verbose_name='Special Links')),
                ('link_attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('label', models.CharField(blank=True, default='', max_length=255, verbose_name='Display name')),
                ('type', allink_core.core_apps.allink_button_link.model_fields.LinkOrButton(default='lnk', max_length=255, verbose_name='Type')),
                ('btn_context', allink_core.core_apps.allink_button_link.model_fields.Context(choices=[('default', 'Default'), ('primary', 'Primary'), ('success', 'Success'), ('info', 'Info'), ('warning', 'Warning'), ('danger', 'Danger'), ('link', 'Link')], default='default', max_length=255, verbose_name='Context')),
                ('btn_size', allink_core.core_apps.allink_button_link.model_fields.Size(blank=True, default='md', max_length=255, verbose_name='Size')),
                ('btn_block', models.BooleanField(default=False, verbose_name='Block')),
                ('txt_context', allink_core.core_apps.allink_button_link.model_fields.Context(blank=True, choices=[('', 'Default'), ('primary', 'Primary'), ('success', 'Success'), ('info', 'Info'), ('warning', 'Warning'), ('danger', 'Danger'), ('muted ', 'Muted')], default='', max_length=255, verbose_name='Context')),
                ('icon_left', allink_core.core.models.fields.Icon(blank=True, default='', max_length=255, verbose_name='Icon left')),
                ('icon_right', allink_core.core.models.fields.Icon(blank=True, default='', max_length=255, verbose_name='Icon right')),
                ('email_subject', models.CharField(blank=True, default='', max_length=255, verbose_name='Subject')),
                ('email_body_text', models.TextField(blank=True, default='', verbose_name='Body Text')),
                ('cmsplugin_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='allink_button_link_allinkbuttonlinkplugin', serialize=False, to='cms.CMSPlugin')),
                ('link_apphook_page', cms.models.fields.PageField(help_text='If provided, overrides the external link.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allink_button_link_allinkbuttonlinkplugin_app_legacy_redirects', to='cms.Page', verbose_name='New Apphook-Page')),
                ('link_file', filer.fields.file.FilerFileField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='filer.File', verbose_name='file')),
                ('link_page', cms.models.fields.PageField(help_text='If provided, overrides the external link and New Apphook-Page.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='cms.Page', verbose_name='New Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('cms.cmsplugin', models.Model),
        ),
    ]
